/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import util.CsvUtil;

/**
 * Aplicação Swing para gerenciar Contas e Categorias com persistência em
 * arquivos CSV. Oferece operações de salvar, exibir, excluir e resetar.
 *
 * @author Ralf
 */
public class Cadastro extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Cadastro.class.getName());
    private final String caminhoCategorias = System.getProperty("user.dir") + "/src/main/java/dados/categorias.csv";
    private final String caminhoContas = System.getProperty("user.dir") + "/src/main/java/dados/contas.csv";

    /**
     * Construtor: inicializa a interface e configura eventos.
     */
    public Cadastro() {
        super("Gerenciar Contas e Categorias");
        initComponents();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(700, 500);
        setLocationRelativeTo(null);
        setVisible(true);
        spTabelaCategorias.setVisible(false);
        spTabelaContas.setVisible(false);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContas = new javax.swing.JPanel();
        lbNomeContas = new javax.swing.JLabel();
        tfContas = new javax.swing.JTextField();
        btContasSalvar = new javax.swing.JButton();
        btContasExibir = new javax.swing.JButton();
        spTabelaContas = new javax.swing.JScrollPane();
        tbTabelaContas = new javax.swing.JTable();
        btContasExcluir = new javax.swing.JButton();
        btContasResetar = new javax.swing.JButton();
        jpCategorias = new javax.swing.JPanel();
        tfCategoria = new javax.swing.JTextField();
        lbNomeCategoria = new javax.swing.JLabel();
        btSalvarCategoria = new javax.swing.JButton();
        btExibirCategoria = new javax.swing.JButton();
        spTabelaCategorias = new javax.swing.JScrollPane();
        tbTabelaCategorias = new javax.swing.JTable();
        btCategoriasExcluir = new javax.swing.JButton();
        btCategoriasResetar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jpContas.setBorder(javax.swing.BorderFactory.createTitledBorder("Contas"));
        jpContas.setToolTipText("");

        lbNomeContas.setText("Nome da Conta:");

        tfContas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfContasActionPerformed(evt);
            }
        });

        btContasSalvar.setText("Salvar");
        btContasSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btContasSalvarActionPerformed(evt);
            }
        });

        btContasExibir.setText("Exibir");
        btContasExibir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btContasExibirActionPerformed(evt);
            }
        });

        tbTabelaContas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spTabelaContas.setViewportView(tbTabelaContas);

        btContasExcluir.setText("Excluir");
        btContasExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btContasExcluirActionPerformed(evt);
            }
        });

        btContasResetar.setText("Resetar");
        btContasResetar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btContasResetarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpContasLayout = new javax.swing.GroupLayout(jpContas);
        jpContas.setLayout(jpContasLayout);
        jpContasLayout.setHorizontalGroup(
            jpContasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpContasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpContasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(spTabelaContas)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpContasLayout.createSequentialGroup()
                        .addComponent(lbNomeContas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfContas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btContasSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btContasExibir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btContasExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btContasResetar)))
                .addContainerGap(7, Short.MAX_VALUE))
        );
        jpContasLayout.setVerticalGroup(
            jpContasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpContasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpContasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNomeContas)
                    .addComponent(tfContas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btContasSalvar)
                    .addComponent(btContasExibir)
                    .addComponent(btContasExcluir)
                    .addComponent(btContasResetar))
                .addGap(18, 18, 18)
                .addComponent(spTabelaContas, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addContainerGap())
        );

        jpCategorias.setBorder(javax.swing.BorderFactory.createTitledBorder("Categorias"));
        jpCategorias.setToolTipText("");

        tfCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCategoriaActionPerformed(evt);
            }
        });

        lbNomeCategoria.setText("Categoria:");

        btSalvarCategoria.setText("Salvar");
        btSalvarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarCategoriaActionPerformed(evt);
            }
        });

        btExibirCategoria.setText("Exibir");
        btExibirCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExibirCategoriaActionPerformed(evt);
            }
        });

        tbTabelaCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spTabelaCategorias.setViewportView(tbTabelaCategorias);

        btCategoriasExcluir.setText("Excluir");
        btCategoriasExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCategoriasExcluirActionPerformed(evt);
            }
        });

        btCategoriasResetar.setText("Resetar");
        btCategoriasResetar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCategoriasResetarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpCategoriasLayout = new javax.swing.GroupLayout(jpCategorias);
        jpCategorias.setLayout(jpCategoriasLayout);
        jpCategoriasLayout.setHorizontalGroup(
            jpCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCategoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(spTabelaCategorias)
                    .addGroup(jpCategoriasLayout.createSequentialGroup()
                        .addComponent(lbNomeCategoria)
                        .addGap(33, 33, 33)
                        .addComponent(tfCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSalvarCategoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btExibirCategoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCategoriasExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCategoriasResetar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpCategoriasLayout.setVerticalGroup(
            jpCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCategoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNomeCategoria)
                    .addComponent(tfCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSalvarCategoria)
                    .addComponent(btExibirCategoria)
                    .addComponent(btCategoriasExcluir)
                    .addComponent(btCategoriasResetar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spTabelaCategorias, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jpContas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpCategorias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(145, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jpContas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jpCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(137, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Ação do botão "Salvar Conta".
     * <p>
     * Este método captura o texto digitado no campo {@code tfContas}, valida se não está vazio
     * e o adiciona ao arquivo CSV definido em {@code caminhoContas}. Após salvar, o campo de texto
     * é limpo para nova entrada.
     * </p>
     *
     * <p>Em caso de erro de escrita no arquivo, uma mensagem de erro é exibida ao usuário
     * por meio de um {@link JOptionPane}.</p>
     *
     * @param evt o evento de clique do botão
     */
    private void btContasSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btContasSalvarActionPerformed
        String valor = tfContas.getText().trim();
        if (valor.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Conta não pode ser vazia.");
            return;
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(caminhoContas, true))) {
            bw.write(valor);
            bw.newLine();
            tfContas.setText("");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar conta: " + e.getMessage());
        }
    }//GEN-LAST:event_btContasSalvarActionPerformed

    /**
     * Ação do botão "Exibir Conta".
     * <p>
     * Alterna a visibilidade do painel {@code spTabelaContas}. Se o painel for exibido,
     * o método lê todas as contas do arquivo CSV definido em {@code caminhoContas} e
     * popula a tabela {@code tbTabelaContas} com os dados.
     * </p>
     *
     * <p>Em caso de erro de leitura do arquivo, uma mensagem de erro é exibida
     * utilizando {@link JOptionPane}.</p>
     *
     * <p>Após alterar a visibilidade e atualizar os dados, o layout é reajustado
     * chamando {@code revalidate()}, {@code repaint()} e {@code pack()}.</p>
     *
     * @param evt o evento de clique do botão
     */
    private void btContasExibirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btContasExibirActionPerformed
        spTabelaContas.setVisible(!spTabelaContas.isVisible());

        if (spTabelaContas.isVisible()) {
            List<String> dados = new ArrayList<>();
            try (BufferedReader br = new BufferedReader(new FileReader(caminhoContas))) {
                String linha;
                while ((linha = br.readLine()) != null) {
                    dados.add(linha);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Erro ao ler arquivo: " + e.getMessage());
                return;
            }

            DefaultTableModel modelo = new DefaultTableModel(new Object[]{"Conta"}, 0);
            for (String d : dados) {
                modelo.addRow(new Object[]{d});
            }
            tbTabelaContas.setModel(modelo);
        }

        // Sempre ajuste o layout após mudar a visibilidade
        revalidate();
        repaint();
        pack();


    }//GEN-LAST:event_btContasExibirActionPerformed
    
    /**
     * Ação do botão "Excluir Conta".
     * <p>
     * Solicita ao usuário o nome da conta a ser excluída através de um {@link JOptionPane}.
     * O método então lê o arquivo CSV definido em {@code caminhoContas}, remove a linha
     * correspondente à conta informada e regrava o arquivo com as contas restantes.
     * </p>
     *
     * <p>Se o arquivo não existir ou a conta não for encontrada, uma mensagem de aviso
     * é exibida ao usuário. Após a exclusão bem-sucedida, a lista de contas na interface
     * é atualizada chamando {@link #carregarContas()}, e o layout é reajustado com
     * {@code revalidate()}, {@code repaint()} e {@code pack()}.</p>
     *
     * @param evt o evento de clique do botão
     */
    private void btContasExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btContasExcluirActionPerformed
        String nome = JOptionPane.showInputDialog(this, "Digite o nome da Conta a excluir:");
        if (nome == null || nome.trim().isEmpty()) {
            return;
        }

        File arquivo = new File(caminhoContas);
        if (!arquivo.exists()) {
            JOptionPane.showMessageDialog(this, "Arquivo de Conta não encontrado.");
            return;
        }

        List<String> novasLinhas = new ArrayList<>();
        boolean encontrado = false;

        try (BufferedReader br = new BufferedReader(new FileReader(arquivo))) {
            String linha;
            while ((linha = br.readLine()) != null) {
                if (!linha.trim().equalsIgnoreCase(nome.trim())) {
                    novasLinhas.add(linha);
                } else {
                    encontrado = true;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao ler arquivo: " + e.getMessage());
            return;
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(this, "Conta não encontrada.");
            return;
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(arquivo))) {
            for (String linha : novasLinhas) {
                bw.write(linha);
                bw.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar arquivo: " + e.getMessage());
            return;
        }

        carregarContas();
        revalidate();
        repaint();
        pack();

    }//GEN-LAST:event_btContasExcluirActionPerformed

   /**
    * Lê o arquivo de categorias e exibe os dados na tabela {@code tbTabelaCategorias}.
    * <p>
    * Internamente, chama {@link #carregarTabela(String, String, JTable)} passando
    * o caminho do arquivo de categorias, o nome da coluna e a tabela correspondente.
    * </p>
    */
    private void carregarCategorias() {
        carregarTabela(caminhoCategorias, "Categoria", tbTabelaCategorias);
    }

   /**
    * Lê o arquivo de contas e exibe os dados na tabela {@code tbTabelaContas}.
    * <p>
    * Internamente, chama {@link #carregarTabela(String, String, JTable)} passando
    * o caminho do arquivo de contas, o nome da coluna e a tabela correspondente.
    * </p>
    */
    private void carregarContas() {
        carregarTabela(caminhoContas, "Conta", tbTabelaContas);
    }

   /**
    * Carrega os dados de um arquivo CSV e preenche a JTable informada.
    * <p>
    * Cada linha do arquivo é adicionada como uma linha na tabela, e o cabeçalho da
    * coluna é definido pelo parâmetro {@code coluna}.
    * </p>
    *
    * @param caminho caminho do arquivo CSV a ser lido
    * @param coluna  nome da coluna que será exibida na tabela
    * @param tabela  JTable que receberá os dados
    */
    private void carregarTabela(String caminho, String coluna, JTable tabela) {
        List<String> dados = CsvUtil.lerArquivo(caminho);
        DefaultTableModel modelo = new DefaultTableModel(new Object[]{coluna}, 0);
        dados.forEach(d -> modelo.addRow(new Object[]{d}));
        tabela.setModel(modelo);
    }

   /**
    * Ação do botão "Resetar Contas".
    * <p>
    * Solicita ao usuário uma confirmação para apagar todas as contas do arquivo CSV
    * definido em {@code caminhoContas}. Caso o usuário confirme, o arquivo é limpo
    * e a tabela {@code tbTabelaContas} é atualizada.
    * </p>
    *
    * <p>Em caso de erro de escrita no arquivo, uma mensagem de erro é exibida utilizando
    * {@link JOptionPane}. Após a limpeza, o layout da interface é reajustado chamando
    * {@code revalidate()}, {@code repaint()} e {@code pack()}.</p>
    *
    * @param evt o evento de clique do botão
    */
    private void btContasResetarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btContasResetarActionPerformed
        int confirmacao = JOptionPane.showConfirmDialog(this, "Deseja apagar tudo?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirmacao == JOptionPane.YES_OPTION) {
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(caminhoContas))) {
                // limpa o arquivo
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Erro ao limpar: " + e.getMessage());
                return;
            }
        }

        carregarContas();
        revalidate();
        repaint();
        pack();
    }//GEN-LAST:event_btContasResetarActionPerformed

    private void tfCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCategoriaActionPerformed

    
   /**
    * Ação do botão "Salvar Categoria".
    * <p>
    * Captura o texto do campo {@code tfCategoria}, valida se não está vazio e adiciona
    * a categoria ao arquivo CSV definido em {@code caminhoCategorias}. Após salvar, limpa
    * o campo de texto.
    * </p>
    *
    * <p>Em caso de erro de escrita, exibe uma mensagem utilizando {@link JOptionPane}.</p>
    *
    * @param evt o evento de clique do botão
    */
    private void btSalvarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarCategoriaActionPerformed
        String valor = tfCategoria.getText().trim();
        if (valor.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Categoria não pode ser vazia.");
            return;
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(caminhoCategorias, true))) {
            bw.write(valor);
            bw.newLine();
            tfCategoria.setText("");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar categoria: " + e.getMessage());
        }
    }//GEN-LAST:event_btSalvarCategoriaActionPerformed
    
    
   /**
    * Ação do botão "Exibir Categoria".
    * <p>
    * Alterna a visibilidade do painel {@code spTabelaCategorias}. Se o painel for exibido,
    * lê todas as categorias do CSV {@code caminhoCategorias} e popula a tabela {@code tbTabelaCategorias}.
    * </p>
    *
    * <p>Em caso de erro de leitura, exibe uma mensagem utilizando {@link JOptionPane}.
    * Após atualizar os dados, o layout é reajustado com {@code revalidate()}, {@code repaint()} e {@code pack()}.</p>
    *
    * @param evt o evento de clique do botão
    */
    private void btExibirCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExibirCategoriaActionPerformed
        spTabelaCategorias.setVisible(!spTabelaCategorias.isVisible());
        if (spTabelaCategorias.isVisible()) {
            List<String> dados = new ArrayList<>();
            try (BufferedReader br = new BufferedReader(new FileReader(caminhoCategorias))) {
                String linha;
                while ((linha = br.readLine()) != null) {
                    dados.add(linha);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Erro ao ler arquivo: " + e.getMessage());
                return;
            }

            DefaultTableModel modelo = new DefaultTableModel(new Object[]{"Categoria"}, 0);
            for (String d : dados) {
                modelo.addRow(new Object[]{d});
            }
            tbTabelaCategorias.setModel(modelo);

        }
        revalidate();
        repaint();
        pack();

    }//GEN-LAST:event_btExibirCategoriaActionPerformed
    
   /**
    * Ação do botão "Excluir Categoria".
    * <p>
    * Solicita ao usuário o nome da categoria a ser excluída via {@link JOptionPane}.
    * Remove a categoria do CSV {@code caminhoCategorias} e atualiza a tabela {@code tbTabelaCategorias}.
    * </p>
    *
    * <p>Se o arquivo não existir ou a categoria não for encontrada, exibe uma mensagem de aviso.
    * Após exclusão, o layout é reajustado com {@code revalidate()}, {@code repaint()} e {@code pack()}.</p>
    *
    * @param evt o evento de clique do botão
    */
    private void btCategoriasExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCategoriasExcluirActionPerformed
        String nome = JOptionPane.showInputDialog(this, "Digite o nome da Categoria a excluir:");
        if (nome == null || nome.trim().isEmpty()) {
            return;
        }

        File arquivo = new File(caminhoCategorias);
        if (!arquivo.exists()) {
            JOptionPane.showMessageDialog(this, "Arquivo de Categoria não encontrado.");
            return;
        }

        List<String> novasLinhas = new ArrayList<>();
        boolean encontrado = false;

        try (BufferedReader br = new BufferedReader(new FileReader(arquivo))) {
            String linha;
            while ((linha = br.readLine()) != null) {
                if (!linha.trim().equalsIgnoreCase(nome.trim())) {
                    novasLinhas.add(linha);
                } else {
                    encontrado = true;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao ler arquivo: " + e.getMessage());
            return;
        }

        if (!encontrado) {
            JOptionPane.showMessageDialog(this, "Categoria não encontrada.");
            return;
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(arquivo))) {
            for (String linha : novasLinhas) {
                bw.write(linha);
                bw.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar arquivo: " + e.getMessage());
            return;
        }

        carregarCategorias();
        revalidate();
        repaint();
        pack();
    }//GEN-LAST:event_btCategoriasExcluirActionPerformed
    
   /**
    * Ação do botão "Resetar Categorias".
    * <p>
    * Solicita confirmação do usuário para apagar todas as categorias do CSV {@code caminhoCategorias}.
    * Caso confirmado, limpa o arquivo e atualiza a tabela {@code tbTabelaCategorias}.
    * </p>
    *
    * <p>Em caso de erro de escrita, exibe uma mensagem utilizando {@link JOptionPane}.
    * Após a limpeza, o layout é reajustado com {@code revalidate()}, {@code repaint()} e {@code pack()}.</p>
    *
    * @param evt o evento de clique do botão
    */
    private void btCategoriasResetarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCategoriasResetarActionPerformed
        int confirmacao = JOptionPane.showConfirmDialog(this, "Deseja apagar tudo?", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (confirmacao == JOptionPane.YES_OPTION) {
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(caminhoCategorias))) {
                // limpa
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Erro ao limpar: " + e.getMessage());
                return;
            }
        }

        carregarCategorias();
        revalidate();
        repaint();
        pack();
    }//GEN-LAST:event_btCategoriasResetarActionPerformed

    private void tfContasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfContasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfContasActionPerformed

    /**
     * Inicia a aplicação.
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Cadastro().setVisible(true));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCategoriasExcluir;
    private javax.swing.JButton btCategoriasResetar;
    private javax.swing.JButton btContasExcluir;
    private javax.swing.JButton btContasExibir;
    private javax.swing.JButton btContasResetar;
    private javax.swing.JButton btContasSalvar;
    private javax.swing.JButton btExibirCategoria;
    private javax.swing.JButton btSalvarCategoria;
    private javax.swing.JPanel jpCategorias;
    private javax.swing.JPanel jpContas;
    private javax.swing.JLabel lbNomeCategoria;
    private javax.swing.JLabel lbNomeContas;
    private javax.swing.JScrollPane spTabelaCategorias;
    private javax.swing.JScrollPane spTabelaContas;
    private javax.swing.JTable tbTabelaCategorias;
    private javax.swing.JTable tbTabelaContas;
    private javax.swing.JTextField tfCategoria;
    private javax.swing.JTextField tfContas;
    // End of variables declaration//GEN-END:variables
}
