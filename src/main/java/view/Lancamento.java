/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 * Tela de lançamentos financeiros.
 * <p>
 * Esta classe implementa uma interface (JFrame) para registrar novos lançamentos
 * de receitas e despesas. Permite ao usuário inserir informações como tipo,
 * valor, data, categoria e conta, salvando os dados em arquivos CSV.
 * </p>
 * 
 * @author Ralf
 */
public class Lancamento extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Lancamento.class.getName());
    private final String caminhoCategorias = System.getProperty("user.dir") + "/src/main/java/dados/categorias.csv";
    private final String caminhoContas = System.getProperty("user.dir") + "/src/main/java/dados/contas.csv";
    private final String caminhoLancamentos = System.getProperty("user.dir") + "/src/main/java/dados/lancamentos.csv";
    private final String caminhoLancamentosTemp = System.getProperty("user.dir") + "/src/main/java/dados/lancamentosTemp.csv";

    /**
     * Creates new form Lancamento
     */
    public Lancamento() {
        initComponents();
        // Chamar carregamento dos combos após a UI estar inicializada
        carregarComboBoxDeCSV();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbTipo = new javax.swing.JComboBox<>();
        ftfData = new javax.swing.JFormattedTextField();
        lbTipo = new javax.swing.JLabel();
        lbDescricao = new javax.swing.JLabel();
        lbData = new javax.swing.JLabel();
        lbValor = new javax.swing.JLabel();
        lbCategoria = new javax.swing.JLabel();
        lbConta = new javax.swing.JLabel();
        cbCategoria = new javax.swing.JComboBox<>();
        cbConta = new javax.swing.JComboBox<>();
        btLimpar = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();
        btDeletar = new javax.swing.JButton();
        lbPagamento = new javax.swing.JLabel();
        cbPagamento = new javax.swing.JComboBox<>();
        ftfValor = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescricao = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lançamento");

        cbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Despesa", "Receita" }));
        cbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoActionPerformed(evt);
            }
        });

        ftfData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));

        lbTipo.setText("Tipo:");

        lbDescricao.setText("Descrição:");

        lbData.setText("Data:");

        lbValor.setText("Valor:");

        lbCategoria.setText("Categoria:");

        lbConta.setText("Conta:");

        cbCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbConta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btLimpar.setText("Limpar");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        btSalvar.setText("Salvar");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        btDeletar.setText("Deletar");
        btDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeletarActionPerformed(evt);
            }
        });

        lbPagamento.setText("Pagamento:");

        cbPagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Débito", "Crédito", "Pix", "Dinheiro" }));

        ftfValor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        taDescricao.setColumns(20);
        taDescricao.setRows(5);
        jScrollPane1.setViewportView(taDescricao);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btDeletar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lbDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(132, 132, 132))
                        .addComponent(btLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lbConta, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbConta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lbData, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbValor, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ftfData)
                                .addComponent(cbTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ftfValor, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lbPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbPagamento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbData)
                    .addComponent(ftfData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTipo)
                    .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbValor)
                    .addComponent(ftfValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCategoria)
                    .addComponent(cbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbConta)
                    .addComponent(cbConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPagamento))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbDescricao)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(btLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTipoActionPerformed


    /**
     * Limpa todos os campos da tela de lançamento.
     * <p>
     * Este método reseta os campos de data, descrição, valor e as JComboBox de
     * categoria, conta, tipo e pagamento, deixando a tela pronta para um novo lançamento.
     * </p>
     * 
     * @param evt Evento de ação gerado pelo botão "Limpar"
     */
    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed

        ftfData.setText("");
        taDescricao.setText("");
        ftfValor.setText("");
        cbCategoria.setSelectedIndex(0);
        cbConta.setSelectedIndex(0);
        cbTipo.setSelectedIndex(0);
        cbPagamento.setSelectedIndex(0);

    }//GEN-LAST:event_btLimparActionPerformed

   /**
    * Salva um novo lançamento financeiro.
    * <p>
    * Este método valida os campos obrigatórios (descrição, data e valor), cria uma
    * linha CSV com os dados do lançamento e adiciona ao arquivo de lançamentos.
    * Após o salvamento, todos os campos são limpos.
    * </p>
    * 
    * @param evt Evento de ação gerado pelo botão "Salvar"
    */
    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed

        try {
            String tipo = (String) cbTipo.getSelectedItem();
            String descricao = taDescricao.getText().trim();
            String data = ftfData.getText().trim();
            String valor = ftfValor.getText().trim();
            String categoria = (String) cbCategoria.getSelectedItem();
            String conta = (String) cbConta.getSelectedItem();

            System.out.println(descricao);

            if (descricao.isEmpty()) {

                System.out.println("A");
                System.out.println(descricao);

            }

            if (data.isEmpty()) {

                System.out.println("B");
                System.out.println(data);

            }

            if (valor.isEmpty()) {

                System.out.println("C");
                System.out.println(valor);

            }

            if (descricao.isEmpty() || data.isEmpty() || valor.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Preencha todos os campos obrigatórios!");
                return;
            }

            String linha = String.join(";", tipo, descricao, data, valor, categoria, conta);

            File arquivo = new File(caminhoLancamentos);
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(arquivo, true))) {
                bw.write(linha);
                bw.newLine();
            }

            JOptionPane.showMessageDialog(this, "Lançamento salvo com sucesso!");

            ftfData.setText("");
            taDescricao.setText("");
            ftfValor.setText("");
            cbCategoria.setSelectedIndex(0);
            cbConta.setSelectedIndex(0);
            cbTipo.setSelectedIndex(0);
            cbPagamento.setSelectedIndex(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar: " + e.getMessage());
        }

    }//GEN-LAST:event_btSalvarActionPerformed

   /**
    * Deleta um lançamento existente com base na descrição informada.
    * <p>
    * Este método solicita a confirmação do usuário e, se confirmada, lê o arquivo
    * de lançamentos, copia todos os lançamentos exceto aquele com a descrição
    * informada para um arquivo temporário, depois substitui o arquivo original.
    * </p>
    * 
    * @param evt Evento de ação gerado pelo botão "Deletar"
    */
    private void btDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeletarActionPerformed
        String descricaoParaDeletar = taDescricao.getText().trim();
        if (descricaoParaDeletar.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Informe a descrição do lançamento a ser deletado!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Deseja realmente deletar o lançamento?");
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        File arquivoOriginal = new File(caminhoLancamentos);
        File arquivoTemp = new File(caminhoLancamentosTemp);

        try (BufferedReader br = new BufferedReader(new FileReader(arquivoOriginal)); BufferedWriter bw = new BufferedWriter(new FileWriter(arquivoTemp))) {

            String linha;
            while ((linha = br.readLine()) != null) {
                // Supondo CSV no formato: tipo;descricao;data;valor;categoria;conta
                String[] campos = linha.split(";");
                if (campos.length > 1) {
                    String descricao = campos[1].trim();
                    if (!descricao.equals(descricaoParaDeletar)) {
                        bw.write(linha);
                        bw.newLine();
                    }
                }
            }

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao acessar o arquivo: " + ex.getMessage());
            return;
        }

        // Apaga o arquivo antigo e renomeia o temporário
        if (!arquivoOriginal.delete()) {
            JOptionPane.showMessageDialog(this, "Erro ao deletar o arquivo original!");
            return;
        }
        if (!arquivoTemp.renameTo(arquivoOriginal)) {
            JOptionPane.showMessageDialog(this, "Erro ao renomear o arquivo temporário!");
            return;
        }

        JOptionPane.showMessageDialog(this, "Lançamento deletado com sucesso!");
    }//GEN-LAST:event_btDeletarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Lancamento().setVisible(true));
    }

   /**
    * Lê um arquivo CSV simples (uma coluna por linha) e retorna uma lista de
    * strings representando cada linha não vazia do arquivo.
    *
    * @param caminhoArquivo Caminho do arquivo CSV a ser lido.
    * @return Lista de strings contendo os dados lidos do CSV.
    */
    private List<String> lerCSV(String caminhoArquivo) {
        List<String> lista = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(caminhoArquivo))) {
            String linha;
            while ((linha = br.readLine()) != null) {
                linha = linha.trim();
                if (!linha.isEmpty()) {
                    lista.add(linha);
                }
            }
        } catch (IOException e) {
            logger.warning("Erro ao ler arquivo CSV: " + caminhoArquivo + " - " + e.getMessage());
        }
        return lista;
    }

   /**
    * Carrega os JComboBox de categoria e conta com os dados lidos de seus
    * respectivos arquivos CSV. Os JComboBox são preenchidos com os itens
    * presentes nos arquivos.
    */
    private void carregarComboBoxDeCSV() {
        // Troque pelos caminhos reais dos seus arquivos CSV:

        List<String> categorias = lerCSV(caminhoCategorias);
        List<String> contas = lerCSV(caminhoContas);

        carregarComboBox(cbCategoria, categorias);
        carregarComboBox(cbConta, contas);
    }

   /**
    * Popula um JComboBox com os itens fornecidos em uma lista.
    *
    * @param combo JComboBox a ser preenchido.
    * @param itens Lista de strings que serão adicionadas ao JComboBox.
    */
    private void carregarComboBox(JComboBox<String> combo, List<String> itens) {
        combo.removeAllItems();
        for (String item : itens) {
            combo.addItem(item);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDeletar;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btSalvar;
    private javax.swing.JComboBox<String> cbCategoria;
    private javax.swing.JComboBox<String> cbConta;
    private javax.swing.JComboBox<String> cbPagamento;
    private javax.swing.JComboBox<String> cbTipo;
    private javax.swing.JFormattedTextField ftfData;
    private javax.swing.JFormattedTextField ftfValor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCategoria;
    private javax.swing.JLabel lbConta;
    private javax.swing.JLabel lbData;
    private javax.swing.JLabel lbDescricao;
    private javax.swing.JLabel lbPagamento;
    private javax.swing.JLabel lbTipo;
    private javax.swing.JLabel lbValor;
    private javax.swing.JTextArea taDescricao;
    // End of variables declaration//GEN-END:variables
}
